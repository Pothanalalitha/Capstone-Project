package com.example.wipro.lalitha.entites;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;

@Entity
public class Patient {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank(message = "Name is required")
    @Size(max = 100)
    private String name;

    @NotBlank(message = "Address is required")
    @Size(max = 255)
    private String address;

    @NotBlank(message = "Gender is required")
    @Pattern(regexp = "Male|Female|Other")
    private String gender;

    @NotNull(message = "Date of Birth is required")
    @Past(message = "Date of Birth must be in the past")
    private LocalDate dob;

    @NotNull(message = "Weight is required")
    @DecimalMin("0.1")
    private Double weight;

    @NotNull(message = "Height is required")
    @DecimalMin("0.1")
    private Double height;
    
    

    @OneToMany(mappedBy = "patient", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<MedicalRecord> medicalRecords = new ArrayList<>();

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public LocalDate getDob() {
		return dob;
	}

	public void setDob(LocalDate dob) {
		this.dob = dob;
	}

	public Double getWeight() {
		return weight;
	}

	public void setWeight(Double weight) {
		this.weight = weight;
	}

	public Double getHeight() {
		return height;
	}

	public void setHeight(Double height) {
		this.height = height;
	}

	public List<MedicalRecord> getMedicalRecords() {
		return medicalRecords;
	}

	public void setMedicalRecords(List<MedicalRecord> medicalRecords) {
		this.medicalRecords = medicalRecords;
	}

	public Patient() {
		super();
	}

	public Patient(@NotBlank(message = "Name is required") @Size(max = 100) String name,
			@NotBlank(message = "Address is required") @Size(max = 255) String address,
			@NotBlank(message = "Gender is required") @Pattern(regexp = "Male|Female|Other") String gender,
			@NotNull(message = "Date of Birth is required") @Past(message = "Date of Birth must be in the past") LocalDate dob,
			@NotNull(message = "Weight is required") @DecimalMin("0.1") Double weight,
			@NotNull(message = "Height is required") @DecimalMin("0.1") Double height,
			List<MedicalRecord> medicalRecords) {
		super();
		this.name = name;
		this.address = address;
		this.gender = gender;
		this.dob = dob;
		this.weight = weight;
		this.height = height;
		this.medicalRecords = medicalRecords;
	}
	
    
}
