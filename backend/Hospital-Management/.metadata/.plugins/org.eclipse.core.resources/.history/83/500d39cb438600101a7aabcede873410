package com.example.wipro.lalitha.controller;



import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

import jakarta.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.wipro.lalitha.dto.AppointmentDTO;
import com.example.wipro.lalitha.services.AppointmentService;

import java.util.List;

@RestController
@RequestMapping("/api/appointments")
public class AppointmentController {

    private static final String APPOINTMENT_CB = "appointmentServiceCB";

    @Autowired
    private AppointmentService appointmentService;

    @GetMapping("/getAllAppointments")
    public ResponseEntity<List<AppointmentDTO>> getAllAppointments() {
        // Could be paginated, here simple all for brevity
        List<AppointmentDTO> all = appointmentService.getAppointmentsByPatientId(null); // Use null for all or create dedicated method
        return ResponseEntity.ok(all);
    }

    @GetMapping("/getAppontmentById/{id}")
    public ResponseEntity<AppointmentDTO> getAppointment(@PathVariable Long id) {
        return ResponseEntity.ok(appointmentService.getAppointmentById(id));
    }

    @PostMapping("/createAppointment")
    @CircuitBreaker(name = APPOINTMENT_CB, fallbackMethod = "fallbackCreateAppointment")
    public ResponseEntity<AppointmentDTO> createAppointment(@Valid @RequestBody AppointmentDTO dto) {
        return ResponseEntity.ok(appointmentService.createAppointment(dto));
    }

    @PutMapping("/updateAppointmentbyId/{id}")
    @CircuitBreaker(name = APPOINTMENT_CB, fallbackMethod = "fallbackUpdateAppointment")
    public ResponseEntity<AppointmentDTO> updateAppointment(@PathVariable Long id, @Valid @RequestBody AppointmentDTO dto) {
        return ResponseEntity.ok(appointmentService.updateAppointment(id, dto));
    }

    @DeleteMapping("/deleteAppointmentById/{id}")
    public ResponseEntity<String> deleteAppointment(@PathVariable Long id) {
        appointmentService.deleteAppointment(id);
        return ResponseEntity.ok("Appointment with id " + id + " deleted successfully");
    }

    public ResponseEntity<AppointmentDTO> fallbackCreateAppointment(AppointmentDTO dto, Throwable t) {
        return ResponseEntity.status(503).build();
    }

    public ResponseEntity<AppointmentDTO> fallbackUpdateAppointment(Long id, AppointmentDTO dto, Throwable t) {
        return ResponseEntity.status(503).build();
    }
}

